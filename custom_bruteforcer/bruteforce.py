#!/usr/bin/env python3
#-*-encoding:utf-8*-

import sys
import crypt
from multiprocessing import Pool

TEST_PASS="password"
TEST_SALT='$y$j9T$F31F/jItUvvjOv6IBFNea/$'
assert crypt.crypt(TEST_PASS, TEST_SALT) == "$y$j9T$F31F/jItUvvjOv6IBFNea/$pCTLzX1nL7rq52IXxWmYiJwii4RJAGDJwZl/LHgM/UD"

HASH_DELIMITER = " - "

def detect_hash_functions(hashes):
    res = []
    for h in hashes:
        if h == "":
            continue
        hashparts = h.lstrip(" ").split(" - ")
        if len(hashparts) < 3:
            raise Exception("Wrong hash format")
        hashres = { "id": hashparts[1] }

        brute_type = hashparts[0]
        if brute_type == "cryptpass":
            salt = "$".join(hashparts[2].split("$")[:-1]) + "$"
            hashres["func"] = lambda w: crypt.crypt(w, salt).split("$")[-1].rstrip()
            hashres["result"] = hashparts[2].split("$")[-1].rstrip()
        else:
            raise Exception(f"Bruteforce type \"{brute_type}\" not yet implemented")
        res.append(hashres)
    return res

def try_word(word, hashes):
    res = list()
    for hash in hashes:
        if hash["func"](word) == hash["result"]:
            res.append({
                "id": hash["id"],
                "plain": word,
            })
    return res

def bruteforce(wordlist, hashes, nproc):
    found = {}
    words = []
    with Pool(nproc) as pool:
        for word in wordlist.readlines():
            if len(words) < nproc:
                words.append(word.strip())
                continue
            for result in pool.map(lambda w: try_word(w, hashes), words):
                if len(result) > 0:
                    for f in result:
                        found[f["id"]] = f["plain"]
                        hashes = [h for h in hashes if h["id"] != f["id"]]
            words = []
            if len(hashes) == 0:
                break;

    if len(words) > 0:
        for word in words:
            result = try_word(word, hashes)
            if len(result) > 0:
                for f in result:
                    found[f["id"]] = f["plain"]
                    hashes = [h for h in hashes if h["id"] != f["id"]]
    return found

args = sys.argv[1:]
if len(args) < 3:
    print("Usage: {} <hash file> <wordlist file> <nproc>".format(sys.argv[0]))
    sys.exit(1)

hashf = args[0]
wlf = args[1]
nproc = int(args[2])
wl = open(wlf, "r")

with open(hashf, "r") as f:
    hashes = f.read().split("\n")

try:
    hashes = detect_hash_functions(hashes)
    result = bruteforce(wl, hashes, nproc)
    for id, res in result.items():
        print(f"Found \"{id}\": \"{res}\"")
    for hash in hashes:
        if hash["id"] in result.keys():
            continue
        print("Not found {}".format(hash["id"]))

finally:
    wl.close()
